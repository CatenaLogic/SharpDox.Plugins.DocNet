<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.DocNet.Steps" #>
<#@ import namespace="SharpDox.UML" #>

<#= $"#{Type.Name}" #>

Name|Value
---|---
<#= $"Namespace|{Type.Namespace.Fullname}" #>
<#= $"Available on|{string.Join(", ", TargetFxs.Select(x => x))}" #>


```
<#= $"{Type.Syntax}" #>
```

<#

// Fields
if (Type.Fields.Count > 0) 
{
#>

## Fields

<#= Type.Constructors.Select(sdField => new MemberData { Member = sdField, MemberType = "field", Repository = Repository }.TransformText()) #>
<#
} 


// Constructors
if (Type.Constructors.Count > 0) 
{
#>

## Constructors

<#= Type.Constructors.Select(sdContructor => new MemberData { Member = sdContructor, MemberType = "method", Repository = Repository }.TransformText()) #>
<#
}


// Properties
if (Type.Properties.Count > 0)
{
#>

## Properties

<#= Type.Properties.Select(sdProperty => new MemberData { Member = sdProperty, MemberType = "property", Repository = Repository }.TransformText()) #>

<#
} 


// Events
if (Type.Events.Count > 0) 
{
#>

## Events

<#= Type.Events.Select(sdEvent => new MemberData { Member = sdEvent, MemberType = "event", Repository = Repository }.TransformText()) #>

<#
}


// Methods
if (Type.Methods.Count > 0) 
{
#>

## Methods

<#= Type.Methods.Select(sdMethod => new MemberData { Member = sdMethod, MemberType = "method", Repository = Repository }.TransformText()) #>

<#
}
#>


<#+	
public SDType Type { get; set; }
public SDTargetFx[] TargetFxs { get; set; }
public SDRepository Repository { get; set; } 
#>